import re
import pefile
import magic
import os
import hashlib

class MalwareTypeDetector:
    def __init__(self):
        # Signature patterns for different malware types
        self.signatures = {
            'ransomware': [
                rb'\.encrypted$', rb'DECRYPT_INSTRUCTION', rb'ransom', rb'bitcoin',
                rb'payment', rb'recovery', rb'encrypt', rb'decrypt'
            ],
            'trojan': [
                rb'backdoor', rb'keylog', rb'stealth', rb'inject', rb'remote_access',
                rb'credentials', rb'steal', rb'hidden'
            ],
            'worm': [
                rb'propagat', rb'self-replicat', rb'spread', rb'network', 
                rb'infect', rb'replicate'
            ],
            'spyware': [
                rb'monitor', rb'spy', rb'screen', rb'keylog', rb'surveillance',
                rb'track', rb'record'
            ],
            'virus': [
                rb'infect', rb'payload', rb'malicious', rb'destroy',
                rb'corrupt', rb'overwrite', rb'damage'
            ]
        }
        
        # Behavioral indicators for different malware types
        self.behaviors = {
            'ransomware': ['file_encryption', 'ransom_note', 'deletion_of_backups'],
            'trojan': ['backdoor_connection', 'data_exfiltration', 'keystroke_logging'],
            'worm': ['self_replication', 'network_propagation', 'port_scanning'],
            'spyware': ['screen_capturing', 'keylogging', 'browser_monitoring'],
            'virus': ['file_infection', 'boot_sector_modification', 'system_file_tampering']
        }
        
        # PE section indicators
        self.section_indicators = {
            'ransomware': ['.crypt', '.lock', '.pay'],
            'trojan': ['.inject', '.remote', '.stealth'],
            'worm': ['.spread', '.scan', '.prop'],
            'spyware': ['.monitor', '.spy', '.track'],
            'virus': ['.infect', '.overw', '.destroy']
        }
    
    def analyze_file_content(self, file_path):
        try:
            with open(file_path, 'rb') as f:
                content = f.read()
                
            type_scores = {}
            
            # Check each malware type's signatures
            for malware_type, patterns in self.signatures.items():
                score = 0
                for pattern in patterns:
                    if re.search(pattern, content, re.IGNORECASE):
                        score += 1
                type_scores[malware_type] = score / len(patterns)
            
            return type_scores
        except Exception as e:
            print(f"Error analyzing file content: {e}")
            return {}
    
    def analyze_pe_file(self, file_path):
        try:
            pe = pefile.PE(file_path)
            type_scores = {}
            
            # Initialize scores
            for malware_type in self.signatures.keys():
                type_scores[malware_type] = 0
            
            # Check for suspicious sections
            for section in pe.sections:
                section_name = section.Name.decode('utf-8', errors='ignore').strip('\x00')
                for malware_type, indicators in self.section_indicators.items():
                    if any(indicator in section_name for indicator in indicators):
                        type_scores[malware_type] += 0.5
            
            # Check imports for suspicious functions
            if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT'):
                for entry in pe.DIRECTORY_ENTRY_IMPORT:
                    for imp in entry.imports:
                        if imp.name:
                            func_name = imp.name.decode('utf-8', errors='ignore')
                            if 'crypt' in func_name.lower() or 'encrypt' in func_name.lower():
                                type_scores['ransomware'] += 0.3
                            if 'socket' in func_name.lower() or 'connect' in func_name.lower():
                                type_scores['trojan'] += 0.2
                                type_scores['worm'] += 0.2
                            if 'find' in func_name.lower() and 'file' in func_name.lower():
                                type_scores['worm'] += 0.3
                            if 'get' in func_name.lower() and 'key' in func_name.lower():
                                type_scores['spyware'] += 0.3
                            if 'screen' in func_name.lower() or 'capture' in func_name.lower():
                                type_scores['spyware'] += 0.3
                            if 'write' in func_name.lower() and 'file' in func_name.lower():
                                type_scores['virus'] += 0.2
                                
            return type_scores
        except Exception as e:
            print(f"Error analyzing PE file: {e}")
            return {}
            
    def get_file_type(self, file_path):
        """Determine file type using python-magic"""
        try:
            file_type = magic.from_file(file_path)
            return file_type
        except Exception as e:
            print(f"Error determining file type: {e}")
            return "Unknown"
    
    def calculate_file_hash(self, file_path):
        """Calculate SHA-256 hash of file"""
        try:
            sha256_hash = hashlib.sha256()
            with open(file_path, "rb") as f:
                for byte_block in iter(lambda: f.read(4096), b""):
                    sha256_hash.update(byte_block)
            return sha256_hash.hexdigest()
        except Exception as e:
            print(f"Error calculating file hash: {e}")
            return None
    
    def detect_malware_type(self, file_path):
        """Analyze file and return detected malware type(s)"""
        file_type = self.get_file_type(file_path)
        content_scores = self.analyze_file_content(file_path)
        
        # If it's a PE file, also get PE-specific analysis
        if "PE32" in file_type or file_path.endswith('.exe') or file_path.endswith('.dll'):
            pe_scores = self.analyze_pe_file(file_path)
            
            # Combine scores
            for malware_type in content_scores:
                if malware_type in pe_scores:
                    content_scores[malware_type] = (content_scores[malware_type] + pe_scores[malware_type]) / 2
        
        # Get the malware type with the highest score
        max_score = 0
        detected_type = "Unknown"
        
        for malware_type, score in content_scores.items():
            if score > max_score and score > 0.3:  # Threshold of 0.3
                max_score = score
                detected_type = malware_type
        
        result = {
            "detected_type": detected_type,
            "confidence": max_score,
            "file_type": file_type,
            "file_hash": self.calculate_file_hash(file_path),
            "all_type_scores": content_scores
        }
        
        return result 